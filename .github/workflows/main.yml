name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  build-and-push-container-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: set-variables
        run: |
          echo "REPOSITORY=ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
          if [[ -n "${{ github.event.release.tag_name }}" ]]; then
            echo "VERSION=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "VERSION=latest" >> "$GITHUB_OUTPUT"
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: buildpush
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            "${{ steps.set-variables.outputs.REPOSITORY }}:${{ steps.set-variables.outputs.VERSION }}"

  package-and-push-helm-chart:
    permissions:
      contents: read
      packages: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: set-variables
        run: |
          echo "REPOSITORY=ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
          echo "VERSION=$(yq -r .version ./helm/cert-manager-webhook-etcd/Chart.yaml)" >> "$GITHUB_OUTPUT"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package and push helm chart
        run: |
          helm package ./helm/cert-manager-webhook-etcd --version ${{ steps.set-variables.outputs.VERSION }}
          helm push ./cert-manager-webhook-etcd-${{ steps.set-variables.outputs.VERSION }}.tgz oci://${{ steps.set-variables.outputs.REPOSITORY }}/charts
  

  publish-helm-chart:
    permissions:
      id-token: write
      packages: write
      contents: write
      actions: read
      deployments: read
      pull-requests: read

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Publish Helm chart to GitHub Pages
        uses: stefanprodan/helm-gh-pages@v1.7.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          linting: off
          charts_dir: helm
